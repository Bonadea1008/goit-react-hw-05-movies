{"version":3,"file":"static/js/208.94a84e50.chunk.js","mappings":"mOAiCA,EA7B2B,WACzB,OAA4CA,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KAQA,OANAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,MAAsBC,MAAK,SAAAJ,GACzBC,EAAkBD,EAAeK,QAClC,GACF,GAAE,KAGD,8BACGL,IACC,4BACE,4CACA,wBACGA,EAAeM,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MACzB,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,iBAAYF,GAApB,SAA2BC,KADpBD,EAIZ,UAMZ,ECzBD,EAJa,SAAAP,GACX,OAAO,SAAC,EAAD,CAAoBA,eAAgBA,GAC5C,C,oKCFKU,EAAU,mCACVC,EAAW,+BAEV,SAASR,IACd,OAAOS,EAAAA,EAAAA,IAAA,UACGD,EADH,uCAC0CD,IAC9CN,MAAK,SAAAS,GACJ,OAAwB,MAApBA,EAASC,OACJD,EAASE,KAETC,QAAQC,OAAO,IAAIC,MAAM,sBAEnC,GACJ,CAEM,SAASC,EAAgBZ,GAC9B,OAAOK,EAAAA,EAAAA,IAAA,UACGD,EADH,kBACqBJ,EADrB,oBACmCG,IACvCN,MAAK,SAAAS,GACJ,OAAwB,MAApBA,EAASC,OACJD,EAEAG,QAAQC,OAAO,IAAIC,MAAM,sBAEnC,GACJ,CAEM,SAASE,EAAmBb,GACjC,OAAOK,EAAAA,EAAAA,IAAA,UACGD,EADH,kBACqBJ,EADrB,4BAC2CG,IAC/CN,MAAK,SAAAS,GACJ,OAAwB,MAApBA,EAASC,OACJD,EAEAG,QAAQC,OAAO,IAAIC,MAAM,sBAEnC,GACJ,CAEM,SAASG,EAAsBd,GACpC,OAAOK,EAAAA,EAAAA,IAAA,UACGD,EADH,kBACqBJ,EADrB,4BAC2CG,IAC/CN,MAAK,SAAAS,GACJ,OAAwB,MAApBA,EAASC,OACJD,EAEAG,QAAQC,OAAO,IAAIC,MAAM,sBAEnC,GACJ,CAEM,SAASI,EAAiBC,GAC/B,OAAOX,EAAAA,EAAAA,IAAA,UACGD,EADH,iCACoCD,EADpC,kBACqDa,IACzDnB,MAAK,SAAAS,GACJ,OAAwB,MAApBA,EAASC,OACJD,EAEAG,QAAQC,OAAO,IAAIC,MAAM,sBAEnC,GACJ,C","sources":["components/TrendingMoviesList/TrendingMoviesList.jsx","Pages/Home.jsx","Services/fetchAPI.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { fetchTrendingMovies } from '../../Services/fetchAPI';\n\nconst TrendingMoviesList = () => {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n\n  useEffect(() => {\n    fetchTrendingMovies().then(trendingMovies => {\n      setTrendingMovies(trendingMovies.results);\n    });\n  }, []);\n\n  return (\n    <>\n      {trendingMovies && (\n        <div>\n          <h1>Trending today</h1>\n          <ul>\n            {trendingMovies.map(({ id, title }) => {\n              return (\n                <li key={id}>\n                  <Link to={`movies/${id}`}>{title}</Link>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default TrendingMoviesList;\n","import TrendingMoviesList from 'components/TrendingMoviesList/TrendingMoviesList';\n\nconst Home = trendingMovies => {\n  return <TrendingMoviesList trendingMovies={trendingMovies} />;\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst API_KEY = '6517314411afe114436dbf57ea19a496';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport function fetchTrendingMovies() {\n  return axios\n    .get(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`)\n    .then(response => {\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        return Promise.reject(new Error('There is no movies'));\n      }\n    });\n}\n\nexport function fetchMoviesById(id) {\n  return axios\n    .get(`${BASE_URL}/movie/${id}?api_key=${API_KEY}`)\n    .then(response => {\n      if (response.status === 200) {\n        return response;\n      } else {\n        return Promise.reject(new Error('There is no movies'));\n      }\n    });\n}\n\nexport function fetchCastByMovieId(id) {\n  return axios\n    .get(`${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`)\n    .then(response => {\n      if (response.status === 200) {\n        return response;\n      } else {\n        return Promise.reject(new Error('There is no movies'));\n      }\n    });\n}\n\nexport function fetchReviewsByMovieId(id) {\n  return axios\n    .get(`${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`)\n    .then(response => {\n      if (response.status === 200) {\n        return response;\n      } else {\n        return Promise.reject(new Error('There is no movies'));\n      }\n    });\n}\n\nexport function fetchSearchMovie(query) {\n  return axios\n    .get(`${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`)\n    .then(response => {\n      if (response.status === 200) {\n        return response;\n      } else {\n        return Promise.reject(new Error('There is no movies'));\n      }\n    });\n}\n"],"names":["useState","trendingMovies","setTrendingMovies","useEffect","fetchTrendingMovies","then","results","map","id","title","to","API_KEY","BASE_URL","axios","response","status","data","Promise","reject","Error","fetchMoviesById","fetchCastByMovieId","fetchReviewsByMovieId","fetchSearchMovie","query"],"sourceRoot":""}