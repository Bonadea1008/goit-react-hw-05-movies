{"version":3,"file":"static/js/76.a2ceea45.chunk.js","mappings":"mRAEMA,EAAU,mCACVC,EAAW,+BAEV,SAASC,IACd,OAAOC,EAAAA,EAAAA,IAAA,UACGF,EADH,uCAC0CD,IAC9CI,MAAK,SAAAC,GACJ,OAAwB,MAApBA,EAASC,OACJD,EAASE,KAETC,QAAQC,OAAO,IAAIC,MAAM,sBAEnC,GACJ,CAEM,SAASC,EAAgBC,GAC9B,OAAOT,EAAAA,EAAAA,IAAA,UACGF,EADH,kBACqBW,EADrB,oBACmCZ,IACvCI,MAAK,SAAAC,GACJ,OAAwB,MAApBA,EAASC,OACJD,EAEAG,QAAQC,OAAO,IAAIC,MAAM,sBAEnC,GACJ,CAEM,SAASG,EAAmBD,GACjC,OAAOT,EAAAA,EAAAA,IAAA,UACGF,EADH,kBACqBW,EADrB,4BAC2CZ,IAC/CI,MAAK,SAAAC,GACJ,OAAwB,MAApBA,EAASC,OACJD,EAEAG,QAAQC,OAAO,IAAIC,MAAM,sBAEnC,GACJ,CAEM,SAASI,EAAsBF,GACpC,OAAOT,EAAAA,EAAAA,IAAA,UACGF,EADH,kBACqBW,EADrB,4BAC2CZ,IAC/CI,MAAK,SAAAC,GACJ,OAAwB,MAApBA,EAASC,OACJD,EAEAG,QAAQC,OAAO,IAAIC,MAAM,sBAEnC,GACJ,CAEM,SAASK,EAAiBC,GAC/B,OAAOb,EAAAA,EAAAA,IAAA,UACGF,EADH,iCACoCD,EADpC,kBACqDgB,IACzDZ,MAAK,SAAAC,GACJ,OAAwB,MAApBA,EAASC,OACJD,EAEAG,QAAQC,OAAO,IAAIC,MAAM,sBAEnC,GACJ,C,0GC9DD,EAA2B,uBAA3B,EAA6D,uBAA7D,EAA8F,sBAA9F,EAA+H,uB,SC6C/H,EAzCa,WACX,OAAwBO,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QASR,OALAE,EAAAA,EAAAA,YAAU,WACHF,IACLP,EAAAA,EAAAA,IAAmBO,GAAShB,MAAK,SAAAG,GAAI,OAAIY,EAAQZ,EAAKA,KAAKW,KAAtB,GACtC,GAAE,CAACE,KAGF,8BACmB,IAAhBF,EAAKK,SACJ,8BACE,eAAIC,UAAWC,EAAf,SACGP,EAAKQ,KAAI,YAA4C,IAAzCd,EAAwC,EAAxCA,GAAIe,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UACnC,OACE,gBAAIL,UAAWC,EAAf,WACE,gBACEK,IACEF,EACI,kCAAoCA,EAlB1D,wHAqBgBG,IAAKJ,EACLH,UAAWC,EACXO,MAAM,QACL,KACH,cAAGR,UAAWC,EAAd,SAA6BE,KAC7B,eAAGH,UAAWC,EAAd,yBAAyCI,OAZTjB,EAerC,SAMZ,C","sources":["Services/fetchAPI.js","webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '6517314411afe114436dbf57ea19a496';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport function fetchTrendingMovies() {\n  return axios\n    .get(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`)\n    .then(response => {\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        return Promise.reject(new Error('There is no movies'));\n      }\n    });\n}\n\nexport function fetchMoviesById(id) {\n  return axios\n    .get(`${BASE_URL}/movie/${id}?api_key=${API_KEY}`)\n    .then(response => {\n      if (response.status === 200) {\n        return response;\n      } else {\n        return Promise.reject(new Error('There is no movies'));\n      }\n    });\n}\n\nexport function fetchCastByMovieId(id) {\n  return axios\n    .get(`${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`)\n    .then(response => {\n      if (response.status === 200) {\n        return response;\n      } else {\n        return Promise.reject(new Error('There is no movies'));\n      }\n    });\n}\n\nexport function fetchReviewsByMovieId(id) {\n  return axios\n    .get(`${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`)\n    .then(response => {\n      if (response.status === 200) {\n        return response;\n      } else {\n        return Promise.reject(new Error('There is no movies'));\n      }\n    });\n}\n\nexport function fetchSearchMovie(query) {\n  return axios\n    .get(`${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`)\n    .then(response => {\n      if (response.status === 200) {\n        return response;\n      } else {\n        return Promise.reject(new Error('There is no movies'));\n      }\n    });\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"castList\":\"Cast_castList__ARoWn\",\"castItem\":\"Cast_castItem__-Jcfe\",\"castImg\":\"Cast_castImg__T4WbF\",\"castName\":\"Cast_castName__-i08u\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCastByMovieId } from 'Services/fetchAPI';\nimport css from '../Cast/Cast.module.css';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n  const NoImage =\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/No-Image-Placeholder.svg/195px-No-Image-Placeholder.svg.png';\n\n  useEffect(() => {\n    if (!movieId) return;\n    fetchCastByMovieId(movieId).then(data => setCast(data.data.cast));\n  }, [movieId]);\n\n  return (\n    <>\n      {cast.length !== 0 && (\n        <section>\n          <ul className={css.castList}>\n            {cast.map(({ id, name, profile_path, character }) => {\n              return (\n                <li className={css.castItem} key={id}>\n                  <img\n                    src={\n                      profile_path\n                        ? `https://image.tmdb.org/t/p/w500` + profile_path\n                        : NoImage\n                    }\n                    alt={name}\n                    className={css.castImg}\n                    width=\"180\"\n                  />{' '}\n                  <p className={css.castName}>{name}</p>\n                  <p className={css.castName}> Character: {character}</p>\n                </li>\n              );\n            })}\n          </ul>\n        </section>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["API_KEY","BASE_URL","fetchTrendingMovies","axios","then","response","status","data","Promise","reject","Error","fetchMoviesById","id","fetchCastByMovieId","fetchReviewsByMovieId","fetchSearchMovie","query","useState","cast","setCast","movieId","useParams","useEffect","length","className","css","map","name","profile_path","character","src","alt","width"],"sourceRoot":""}