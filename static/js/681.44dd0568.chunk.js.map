{"version":3,"file":"static/js/681.44dd0568.chunk.js","mappings":"oRAEMA,EAAU,mCACVC,EAAW,+BAEV,SAASC,IACd,OAAOC,EAAAA,EAAAA,IAAA,UACGF,EADH,uCAC0CD,IAC9CI,MAAK,SAAAC,GACJ,OAAwB,MAApBA,EAASC,OACJD,EAASE,KAETC,QAAQC,OAAO,IAAIC,MAAM,sBAEnC,GACJ,CAEM,SAASC,EAAgBC,GAC9B,OAAOT,EAAAA,EAAAA,IAAA,UACGF,EADH,kBACqBW,EADrB,oBACmCZ,IACvCI,MAAK,SAAAC,GACJ,OAAwB,MAApBA,EAASC,OACJD,EAEAG,QAAQC,OAAO,IAAIC,MAAM,sBAEnC,GACJ,CAEM,SAASG,EAAmBD,GACjC,OAAOT,EAAAA,EAAAA,IAAA,UACGF,EADH,kBACqBW,EADrB,4BAC2CZ,IAC/CI,MAAK,SAAAC,GACJ,OAAwB,MAApBA,EAASC,OACJD,EAEAG,QAAQC,OAAO,IAAIC,MAAM,sBAEnC,GACJ,CAEM,SAASI,EAAsBF,GACpC,OAAOT,EAAAA,EAAAA,IAAA,UACGF,EADH,kBACqBW,EADrB,4BAC2CZ,IAC/CI,MAAK,SAAAC,GACJ,OAAwB,MAApBA,EAASC,OACJD,EAEAG,QAAQC,OAAO,IAAIC,MAAM,sBAEnC,GACJ,CAEM,SAASK,EAAiBC,GAC/B,OAAOb,EAAAA,EAAAA,IAAA,UACGF,EADH,iCACoCD,EADpC,kBACqDgB,IACzDZ,MAAK,SAAAC,GACJ,OAAwB,MAApBA,EAASC,OACJD,EAEAG,QAAQC,OAAO,IAAIC,MAAM,sBAEnC,GACJ,C,8EC5BD,UA/BgB,WACd,OAA8BO,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAOR,OALAE,EAAAA,EAAAA,YAAU,WACHF,IACLN,EAAAA,EAAAA,IAAsBM,GAAShB,MAAK,SAAAG,GAAI,OAAIY,EAAWZ,EAAKA,KAAKgB,QAAzB,GACzC,GAAE,CAACH,KAGF,8BACsB,IAAnBF,EAAQM,QACP,8BACE,wBACGN,EAAQO,KAAI,YAA8B,IAA3Bb,EAA0B,EAA1BA,GAAIc,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OACE,2BACE,qCAAaD,MACb,uBAAIC,MAFGf,EAKZ,SAIL,sEAIP,C","sources":["Services/fetchAPI.js","components/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '6517314411afe114436dbf57ea19a496';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport function fetchTrendingMovies() {\n  return axios\n    .get(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`)\n    .then(response => {\n      if (response.status === 200) {\n        return response.data;\n      } else {\n        return Promise.reject(new Error('There is no movies'));\n      }\n    });\n}\n\nexport function fetchMoviesById(id) {\n  return axios\n    .get(`${BASE_URL}/movie/${id}?api_key=${API_KEY}`)\n    .then(response => {\n      if (response.status === 200) {\n        return response;\n      } else {\n        return Promise.reject(new Error('There is no movies'));\n      }\n    });\n}\n\nexport function fetchCastByMovieId(id) {\n  return axios\n    .get(`${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`)\n    .then(response => {\n      if (response.status === 200) {\n        return response;\n      } else {\n        return Promise.reject(new Error('There is no movies'));\n      }\n    });\n}\n\nexport function fetchReviewsByMovieId(id) {\n  return axios\n    .get(`${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`)\n    .then(response => {\n      if (response.status === 200) {\n        return response;\n      } else {\n        return Promise.reject(new Error('There is no movies'));\n      }\n    });\n}\n\nexport function fetchSearchMovie(query) {\n  return axios\n    .get(`${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`)\n    .then(response => {\n      if (response.status === 200) {\n        return response;\n      } else {\n        return Promise.reject(new Error('There is no movies'));\n      }\n    });\n}\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchReviewsByMovieId } from 'Services/fetchAPI';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) return;\n    fetchReviewsByMovieId(movieId).then(data => setReviews(data.data.results));\n  }, [movieId]);\n\n  return (\n    <>\n      {reviews.length !== 0 ? (\n        <section>\n          <ul>\n            {reviews.map(({ id, author, content }) => {\n              return (\n                <li key={id}>\n                  <h3>Author: {author}</h3>\n                  <p>{content}</p>\n                </li>\n              );\n            })}\n          </ul>\n        </section>\n      ) : (\n        <p>We don'/t have any reviews for this movie</p>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["API_KEY","BASE_URL","fetchTrendingMovies","axios","then","response","status","data","Promise","reject","Error","fetchMoviesById","id","fetchCastByMovieId","fetchReviewsByMovieId","fetchSearchMovie","query","useState","reviews","setReviews","movieId","useParams","useEffect","results","length","map","author","content"],"sourceRoot":""}